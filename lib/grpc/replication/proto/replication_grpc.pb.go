// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/replication.proto

package replication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReplicationService_RegisterCoordinator_FullMethodName   = "/replication.ReplicationService/RegisterCoordinator"
	ReplicationService_GetCoordinator_FullMethodName        = "/replication.ReplicationService/GetCoordinator"
	ReplicationService_UnregisterCoordinator_FullMethodName = "/replication.ReplicationService/UnregisterCoordinator"
	ReplicationService_SetReplicationPeer_FullMethodName    = "/replication.ReplicationService/SetReplicationPeer"
	ReplicationService_MountGCSBucket_FullMethodName        = "/replication.ReplicationService/MountGCSBucket"
	ReplicationService_UnmountPeer_FullMethodName           = "/replication.ReplicationService/UnmountPeer"
	ReplicationService_UnmountAllPeers_FullMethodName       = "/replication.ReplicationService/UnmountAllPeers"
)

// ReplicationServiceClient is the client API for ReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service for replication worker operations
type ReplicationServiceClient interface {
	// Discovery methods
	RegisterCoordinator(ctx context.Context, in *RegisterCoordinatorRequest, opts ...grpc.CallOption) (*RegisterCoordinatorResponse, error)
	GetCoordinator(ctx context.Context, in *GetCoordinatorRequest, opts ...grpc.CallOption) (*GetCoordinatorResponse, error)
	UnregisterCoordinator(ctx context.Context, in *UnregisterCoordinatorRequest, opts ...grpc.CallOption) (*UnregisterCoordinatorResponse, error)
	// Replication methods
	SetReplicationPeer(ctx context.Context, in *SetReplicationPeerRequest, opts ...grpc.CallOption) (*SetReplicationPeerResponse, error)
	MountGCSBucket(ctx context.Context, in *MountGCSBucketRequest, opts ...grpc.CallOption) (*MountGCSBucketResponse, error)
	UnmountPeer(ctx context.Context, in *UnmountPeerRequest, opts ...grpc.CallOption) (*UnmountPeerResponse, error)
	UnmountAllPeers(ctx context.Context, in *UnmountAllPeersRequest, opts ...grpc.CallOption) (*UnmountAllPeersResponse, error)
}

type replicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationServiceClient(cc grpc.ClientConnInterface) ReplicationServiceClient {
	return &replicationServiceClient{cc}
}

func (c *replicationServiceClient) RegisterCoordinator(ctx context.Context, in *RegisterCoordinatorRequest, opts ...grpc.CallOption) (*RegisterCoordinatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCoordinatorResponse)
	err := c.cc.Invoke(ctx, ReplicationService_RegisterCoordinator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) GetCoordinator(ctx context.Context, in *GetCoordinatorRequest, opts ...grpc.CallOption) (*GetCoordinatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoordinatorResponse)
	err := c.cc.Invoke(ctx, ReplicationService_GetCoordinator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) UnregisterCoordinator(ctx context.Context, in *UnregisterCoordinatorRequest, opts ...grpc.CallOption) (*UnregisterCoordinatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterCoordinatorResponse)
	err := c.cc.Invoke(ctx, ReplicationService_UnregisterCoordinator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) SetReplicationPeer(ctx context.Context, in *SetReplicationPeerRequest, opts ...grpc.CallOption) (*SetReplicationPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetReplicationPeerResponse)
	err := c.cc.Invoke(ctx, ReplicationService_SetReplicationPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) MountGCSBucket(ctx context.Context, in *MountGCSBucketRequest, opts ...grpc.CallOption) (*MountGCSBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountGCSBucketResponse)
	err := c.cc.Invoke(ctx, ReplicationService_MountGCSBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) UnmountPeer(ctx context.Context, in *UnmountPeerRequest, opts ...grpc.CallOption) (*UnmountPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountPeerResponse)
	err := c.cc.Invoke(ctx, ReplicationService_UnmountPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) UnmountAllPeers(ctx context.Context, in *UnmountAllPeersRequest, opts ...grpc.CallOption) (*UnmountAllPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountAllPeersResponse)
	err := c.cc.Invoke(ctx, ReplicationService_UnmountAllPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServiceServer is the server API for ReplicationService service.
// All implementations should embed UnimplementedReplicationServiceServer
// for forward compatibility.
//
// The gRPC service for replication worker operations
type ReplicationServiceServer interface {
	// Discovery methods
	RegisterCoordinator(context.Context, *RegisterCoordinatorRequest) (*RegisterCoordinatorResponse, error)
	GetCoordinator(context.Context, *GetCoordinatorRequest) (*GetCoordinatorResponse, error)
	UnregisterCoordinator(context.Context, *UnregisterCoordinatorRequest) (*UnregisterCoordinatorResponse, error)
	// Replication methods
	SetReplicationPeer(context.Context, *SetReplicationPeerRequest) (*SetReplicationPeerResponse, error)
	MountGCSBucket(context.Context, *MountGCSBucketRequest) (*MountGCSBucketResponse, error)
	UnmountPeer(context.Context, *UnmountPeerRequest) (*UnmountPeerResponse, error)
	UnmountAllPeers(context.Context, *UnmountAllPeersRequest) (*UnmountAllPeersResponse, error)
}

// UnimplementedReplicationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplicationServiceServer struct{}

func (UnimplementedReplicationServiceServer) RegisterCoordinator(context.Context, *RegisterCoordinatorRequest) (*RegisterCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCoordinator not implemented")
}
func (UnimplementedReplicationServiceServer) GetCoordinator(context.Context, *GetCoordinatorRequest) (*GetCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoordinator not implemented")
}
func (UnimplementedReplicationServiceServer) UnregisterCoordinator(context.Context, *UnregisterCoordinatorRequest) (*UnregisterCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCoordinator not implemented")
}
func (UnimplementedReplicationServiceServer) SetReplicationPeer(context.Context, *SetReplicationPeerRequest) (*SetReplicationPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReplicationPeer not implemented")
}
func (UnimplementedReplicationServiceServer) MountGCSBucket(context.Context, *MountGCSBucketRequest) (*MountGCSBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountGCSBucket not implemented")
}
func (UnimplementedReplicationServiceServer) UnmountPeer(context.Context, *UnmountPeerRequest) (*UnmountPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountPeer not implemented")
}
func (UnimplementedReplicationServiceServer) UnmountAllPeers(context.Context, *UnmountAllPeersRequest) (*UnmountAllPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountAllPeers not implemented")
}
func (UnimplementedReplicationServiceServer) testEmbeddedByValue() {}

// UnsafeReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServiceServer will
// result in compilation errors.
type UnsafeReplicationServiceServer interface {
	mustEmbedUnimplementedReplicationServiceServer()
}

func RegisterReplicationServiceServer(s grpc.ServiceRegistrar, srv ReplicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedReplicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReplicationService_ServiceDesc, srv)
}

func _ReplicationService_RegisterCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).RegisterCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_RegisterCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).RegisterCoordinator(ctx, req.(*RegisterCoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_GetCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).GetCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_GetCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).GetCoordinator(ctx, req.(*GetCoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_UnregisterCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterCoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).UnregisterCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_UnregisterCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).UnregisterCoordinator(ctx, req.(*UnregisterCoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_SetReplicationPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReplicationPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).SetReplicationPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_SetReplicationPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).SetReplicationPeer(ctx, req.(*SetReplicationPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_MountGCSBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountGCSBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).MountGCSBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_MountGCSBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).MountGCSBucket(ctx, req.(*MountGCSBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_UnmountPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).UnmountPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_UnmountPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).UnmountPeer(ctx, req.(*UnmountPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_UnmountAllPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountAllPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).UnmountAllPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationService_UnmountAllPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).UnmountAllPeers(ctx, req.(*UnmountAllPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicationService_ServiceDesc is the grpc.ServiceDesc for ReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replication.ReplicationService",
	HandlerType: (*ReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCoordinator",
			Handler:    _ReplicationService_RegisterCoordinator_Handler,
		},
		{
			MethodName: "GetCoordinator",
			Handler:    _ReplicationService_GetCoordinator_Handler,
		},
		{
			MethodName: "UnregisterCoordinator",
			Handler:    _ReplicationService_UnregisterCoordinator_Handler,
		},
		{
			MethodName: "SetReplicationPeer",
			Handler:    _ReplicationService_SetReplicationPeer_Handler,
		},
		{
			MethodName: "MountGCSBucket",
			Handler:    _ReplicationService_MountGCSBucket_Handler,
		},
		{
			MethodName: "UnmountPeer",
			Handler:    _ReplicationService_UnmountPeer_Handler,
		},
		{
			MethodName: "UnmountAllPeers",
			Handler:    _ReplicationService_UnmountAllPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/replication.proto",
}
